(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return l}));var a=n(3),s=n(7),o=(n(0),n(138)),r={id:"using-redux-state",title:"Using redux state"},i={unversionedId:"guides/using-redux-state",id:"guides/using-redux-state",isDocsHomePage:!1,title:"Using redux state",description:"Creating states",source:"@site/docs/guides/using-redux-state.md",slug:"/guides/using-redux-state",permalink:"/use-redux-states/docs/next/guides/using-redux-state",editUrl:"https://github.com/myckhel/use-redux-states/edit/master/redux-state/docs/guides/using-redux-state.md",version:"current",sidebar:"someSidebar",previous:{title:"Usage",permalink:"/use-redux-states/docs/next/usage"},next:{title:"Usage With Redux Toolkit",permalink:"/use-redux-states/docs/next/usage-with-redux-toolkit"}},d=[{value:"<strong><code>Creating states</code></strong>",id:"creating-states",children:[{value:"Controlling how initial state should be set",id:"controlling-how-initial-state-should-be-set",children:[]}]},{value:"<strong><code>Retrieving state</code></strong>",id:"retrieving-state",children:[{value:"Reactively getting state",id:"reactively-getting-state",children:[]},{value:"Getting already existing states",id:"getting-already-existing-states",children:[]},{value:"Reactively getting already existing states",id:"reactively-getting-already-existing-states",children:[]},{value:"Retrieving computed state with callback",id:"retrieving-computed-state-with-callback",children:[]}]},{value:"<strong><code>Updating states</code></strong>",id:"updating-states",children:[{value:"Updating states with setter callback",id:"updating-states-with-setter-callback",children:[]},{value:"Updating already existing states",id:"updating-already-existing-states",children:[]},{value:"Updating already existing states",id:"updating-already-existing-states-1",children:[]}]}],u={toc:d};function l(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"creating-states"},Object(o.b)("strong",{parentName:"h2"},Object(o.b)("inlineCode",{parentName:"strong"},"Creating states"))),Object(o.b)("p",null,"Lets create a new state in the redux store at the path named ",Object(o.b)("inlineCode",{parentName:"p"},"todos")," with initial values of array ",Object(o.b)("inlineCode",{parentName:"p"},"{\n  1: {done: false},\n  2: {done: true},\n  3: {done: false}\n}"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState} from 'use-redux-states'\n\nconst App = () => {\n  useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n  // creates state in the store with key = todos and value = {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: false}\n  // }\n}\n")),Object(o.b)("h3",{id:"controlling-how-initial-state-should-be-set"},"Controlling how initial state should be set"),Object(o.b)("p",null,"When you use the ",Object(o.b)("inlineCode",{parentName:"p"},"redux-state-hook")," with a default state, under the hood it sets the initial state in the store with the given path.",Object(o.b)("br",null),"\n",Object(o.b)("inlineCode",{parentName:"p"},"redux-state-hook")," has an intelligent setter function which determines how your state will be set based on the payload ",Object(o.b)("strong",{parentName:"p"},"(referring the initial state as the payload)"),".\nWhen array is passed as the payload setter assumes you will append the payload with the current state array.",Object(o.b)("br",null),"\nGiven the example below the initial todos state has ",Object(o.b)("inlineCode",{parentName:"p"},"[{done: false}, {done: true}, {done: false}]")," value, setter will push to the existing array state if the payload is array otherwise will replace the state."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport useReduxState from 'use-redux-states'\n\nconst App = () => {\n  // existing todos state = [{done: false}, {done: true}, {done: false}]\n  useReduxState({\n    path: 'todos',\n    state: [\n      {done: false},\n      {done: true},\n      {done: false}\n    ],\n  })\n  // later todos state = [\n  //   {done: false},\n  //   {done: true},\n  //   {done: false}\n  // ]\n}\n")),Object(o.b)("p",null,"Same logic applies to json object but ",Object(o.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive"},"primitive")," payload value replaces the existing state.",Object(o.b)("br",null),"\nYou can handle the setter behaviour by passing a reducer function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport useReduxState from 'use-redux-states'\n\nconst App = () => {\n  // existing todos state = [{done: false}, {done: true}, {done: false}]\n  useReduxState({\n    path: 'todos',\n    state: [{done: true}],\n    reducer: (existingState, payload) => existingState ? [...payload, ...existingState] : payload\n    // custom setter function prepends to the existing state\n  })\n  // later todos state = [{done: true}, {done: false}, {done: true}, {done: false}]\n}\n")),Object(o.b)("h2",{id:"retrieving-state"},Object(o.b)("strong",{parentName:"h2"},Object(o.b)("inlineCode",{parentName:"strong"},"Retrieving state"))),Object(o.b)("p",null,"Lets retrieve the new state we have created using ",Object(o.b)("a",{parentName:"p",href:"../apis/hooks/use-redux-state#getstate"},"getState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState} from 'use-redux-states'\n\nconst App = () => {\n  const {getState} = useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n\n  console.log(getState()) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: false}\n  // }\n}\n")),Object(o.b)("h3",{id:"reactively-getting-state"},"Reactively getting state"),Object(o.b)("p",null,"We can retrieve states reactively using ",Object(o.b)("a",{parentName:"p",href:"./../apis/hooks/use-state-selector"},"useStateSelector")," or ",Object(o.b)("a",{parentName:"p",href:"./../apis/hooks/use-get-state"},"useGetState")," hooks."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState, useGetState} from 'use-redux-states'\n\nconst App = () => {\n  const {useStateSelector} = useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n\n  const todos = useStateSelector()\n\n  console.log(todos) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: false}\n  // }\n}\n")),Object(o.b)("h3",{id:"getting-already-existing-states"},"Getting already existing states"),Object(o.b)("p",null,"In some cases we might want to get an already existsing state without using the ",Object(o.b)("a",{parentName:"p",href:"/use-redux-states/docs/next/apis/hooks/use-redux-state"},"useReduxState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useGetState} from 'use-redux-states'\n\nconst App = () => {\n  const getTodos = useGetState('todos')\n\n  const todos = getTodos()\n\n  console.log(todos) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: false}\n  // }\n}\n")),Object(o.b)("h3",{id:"reactively-getting-already-existing-states"},"Reactively getting already existing states"),Object(o.b)("p",null,"We can reactively get already existsing state without using the ",Object(o.b)("a",{parentName:"p",href:"/use-redux-states/docs/next/apis/hooks/use-redux-state"},"useReduxState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useMemoSelector} from 'use-redux-states'\n\nconst App = () => {\n  const todo = useMemoSelector('todos.2')\n\n  console.log(todo) // {done: true},\n}\n")),Object(o.b)("h3",{id:"retrieving-computed-state-with-callback"},"Retrieving computed state with callback"),Object(o.b)("p",null,"We can retrieve and compute states by passing callback function to ",Object(o.b)("a",{parentName:"p",href:"./../apis/hooks/use-state-selector"},"useStateSelector")," hook and or ",Object(o.b)("a",{parentName:"p",href:"../apis/hooks/use-redux-state#getstate"},"getState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState} from 'use-redux-states'\n\nconst App = () => {\n  const {useStateSelector, getState} = useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n\n  const todo = useStateSelector((todos) => todos[0])\n\n  const todo2 = getState((todos) => todos[1])\n\n  console.log(todo, todo2) // {done: false},{done: false}\n}\n")),Object(o.b)("h2",{id:"updating-states"},Object(o.b)("strong",{parentName:"h2"},Object(o.b)("inlineCode",{parentName:"strong"},"Updating states"))),Object(o.b)("p",null,"We can update states with ",Object(o.b)("a",{parentName:"p",href:"../apis/hooks/use-redux-state#setstate"},"setState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState} from 'use-redux-states'\n\nconst App = () => {\n  const {setState, getState} = useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n\n  const makeTodo3Done = () => setState({3: {done: true}})\n\n  makeTodo3Done();\n  console.log(getState()) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: true}\n  // }\n}\n")),Object(o.b)("h3",{id:"updating-states-with-setter-callback"},"Updating states with setter callback"),Object(o.b)("p",null,"We can also update states by passing a custom setter to ",Object(o.b)("a",{parentName:"p",href:"../apis/hooks/use-redux-state/#setstate"},"setState"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useReduxState} from 'use-redux-states'\n\nconst App = () => {\n  const {setState, getState} = useReduxState({\n    path: 'todos',\n    state: {\n      1: {done: false},\n      2: {done: true},\n      3: {done: false}\n    },\n  })\n\n  const makeTodo3Done = () => setState((todos) => {\n    todos.[3].done = true;\n    return todos\n  })\n\n  makeTodo3Done();\n  console.log(getState()) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: true}\n  // }\n}\n")),Object(o.b)("h3",{id:"updating-already-existing-states"},"Updating already existing states"),Object(o.b)("p",null,"We can update already existing states with ",Object(o.b)("a",{parentName:"p",href:"./../apis/hooks/use-set-state"},"useSetState")," hook."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useSetState, useGetState} from 'use-redux-states'\n\nconst App = () => {\n  const updateThirdTodo = useSetState('todos.3')\n\n  const getTodos = useGetState('todos')\n\n  const makeTodoDone = () => updateThirdTodo({done: true})\n\n  makeTodoDone();\n  console.log(getTodos()) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: true}\n  // }\n}\n")),Object(o.b)("h3",{id:"updating-already-existing-states-1"},"Updating already existing states"),Object(o.b)("p",null,"We can update already existing states with ",Object(o.b)("a",{parentName:"p",href:"./../apis/hooks/use-set-state"},"useSetState")," hook."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import {useSetState, useGetState} from 'use-redux-states'\n\nconst App = () => {\n  const updateThirdTodo = useSetState('todos.3')\n\n  const getTodos = useGetState('todos')\n\n  const makeTodoDone = () => updateThirdTodo((todo3) => {\n    todo3.done = true;\n    return todo3\n  })\n\n  makeTodoDone();\n  console.log(getTodos()) // {\n  //   1: {done: false},\n  //   2: {done: true},\n  //   3: {done: true}\n  // }\n}\n")))}l.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return g}));var a=n(0),s=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=s.a.createContext({}),l=function(e){var t=s.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return s.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},b=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),c=l(n),b=a,g=c["".concat(r,".").concat(b)]||c[b]||p[b]||o;return n?s.a.createElement(g,i(i({ref:t},u),{},{components:n})):s.a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=b;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var u=2;u<o;u++)r[u]=n[u];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);