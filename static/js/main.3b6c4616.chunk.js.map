{"version":3,"sources":["redux/state/reducer.js","../../src/constants.js","../../src/config.js","../../src/helpers.js","../../src/reducers.js","../../src/hooks.js","redux/reducers.js","redux/store.js","App.js","index.js"],"names":["INIT_STATE","sated","reducer","state","type","payload","name","STATE_NAME","config","sel","isString","val","getState","store","callable","selector","setState","dispatch","action","get","getSetter","libConfig","setter","_setter","deleteWith","object","path","index","paths","map","split","length","setWith","value","existingState","constructor","Object","Array","createSlice","initialState","redux_state_subscriptions","reducers","cleanup","subscribe","subscriber_count","unsubscribe","useMemoSelector","selectorOrName","select","eq","isEqual","useSelector","createSelector","initState","useStore","useDispatch","useMemo","Date","getTime","_action","useCallback","cleanUpAction","stateSubscriptionAction","extend","stateUnSubscriptionAction","_getState","getInit","_setState","_selector","storeState","getStateSubscription","useLayoutEffect","unmount","appReducer","baseReducer","combineReducers","mergeReducers","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","conf","console","log","keys","key","Usage","useReduxState","count","locale","onChange","target","onClick","prevState","Setter","number","MountControl","useState","setMount","toString","NestedState","Arr","array","a","Button","onPress","pop","title","slice","Component1","Component2","Text","Independent","independent","portion","Dependent","times","useRef","current","Dependent2","currentState","setState1","useSetState","Row","Cleanable","s","useGetState","useEffect","UnCleanable","p","children","className","ExampleComponent","text","App","mounted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b6c4616.chunk.js","sourcesContent":["const INIT_STATE = { sated: 'yes' }\n\nconst reducer = (state = INIT_STATE, { type, payload, name }) => {\n  switch (type) {\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","export const STATE_NAME = '_use_redux_state'\nexport const SET_REDUX_STATE = `${STATE_NAME}/setState`\nexport const UNSUBSCRIBE_REDUX_STATE = `${STATE_NAME}/unsubscribe`\nexport const SUBSCRIBE_REDUX_STATE = `${STATE_NAME}/subscribe`\nexport const CLEANUP_REDUX_STATE = `${STATE_NAME}/cleanup`\n","// global variable that holds the package's config\nconst config = {}\n\n/**\n * set the package configurations\n * @param  {object} conf configuration onject\n * @return {array}      config keys\n */\nexport const setConfig = (conf = { cleanup: true }) =>\n  Object.keys(conf).map((key) => (config[key] = conf[key]))\n\nexport default config\n","import { get } from 'lodash'\nimport { SET_REDUX_STATE, STATE_NAME } from './constants'\nimport libConfig from './config'\n\n/**\n * returns a given state\n * @param  {any} state selected redux state\n * @return {any}      selected redux state\n */\nexport const sel = (state) => state\n\n/**\n * generates unique state name\n * @return {number}      generated unique state name\n */\nexport const unique = () => new Date().getTime()\n\n/**\n * determines if a given value is string\n * @return {boolean}      true or false\n */\nexport const isString = (val) => typeof val === 'string'\n\n/**\n * get state for the given state\n * @param  {object} store redux store\n * @param  {string} name redux state name\n * @param  {function} callable function that accepts selected state\n * @return {any}      redux state\n */\nexport const getState = (store, name, callable = sel) =>\n  callable(selector(store?.getState(), name))\n\n/**\n * set state for the given state\n * @param  {function} dispatch redux store dispatcher\n * @param  {function} action redux action creator\n * @param  {any} payload value to set in the redux state\n * @param  {function} reducer function that recieve the current state and which should return new state\n */\nexport const setState = (dispatch, action, payload, reducer) =>\n  dispatch(action(payload, reducer))\n\n/**\n * creates redux set state action\n * @param  {string} name redux state name\n * @param  {any} payload any value or function that returns any value\n * @param  {function} reducer function that recieve the current state and which should return new state\n */\nexport const action = (name, payload, reducer) => ({\n  type: SET_REDUX_STATE,\n  payload,\n  name,\n  reducer\n})\n\n/**\n * selects state for the given state name\n * @param  {object} state redux state\n * @param  {string} name redux state name\n * @return {any}      selected redux state\n */\nexport const selector = (state, name) => get(state?.[STATE_NAME], name)\n\n/**\n * gets user defined setter function or package's setter function\n * @return {function}      redux state setter\n */\nexport const getSetter = () => libConfig.setter || _setter\n\n/**\n * delete object property at the given nested path\n * @param  {object} object object to delete property from\n * @param  {string} path path to nested property to delete\n * @param  {number} index index to start delete from based on size of path\n */\nexport const deleteWith = (object, path, index = 0) => {\n  // if path is not array then split path with .\n  const paths = path.map ? path : path.split('.')\n\n  // if at the object's property and delete\n  if (index + 1 >= paths.length) {\n    return delete object[paths[index]]\n  }\n\n  // try to delete propery from the next index\n  return deleteWith(object[paths[index]], paths, ++index)\n}\n\n/**\n * set object property at the given nested path\n * @param  {object} object object to set its property\n * @param  {string} path path to nested property to set\n * @param  {number} index index to start setting property from based on size of path\n * @return  {object}    set object\n */\nexport const setWith = (object, path, value, index = 0) => {\n  // if path is not array then split path with .\n  const paths = path.map ? path : path.split('.')\n\n  // if at the object's property and set\n  if (index + 1 >= paths.length) {\n    object[paths[index]] = value\n    return object\n    // current object property path is undefined\n  } else if (object[paths[index]] === undefined) {\n    // set undefined path as empty object\n    object[paths[index]] = {}\n  }\n\n  // try to set propery from the next index\n  return setWith(object[paths[index]], paths, value, ++index)\n}\n\n/**\n * intellegent redux state setter\n * @param  {object} existingState existng state\n * @param  {any} payload value to set\n * @return  {any}    new state\n */\nexport const _setter = (existingState, payload) => {\n  switch (existingState?.constructor) {\n    case Object:\n      return payload?.constructor === Object\n        ? { ...existingState, ...payload }\n        : payload\n    case Array:\n      return payload?.constructor === Array\n        ? [...existingState, ...payload]\n        : payload\n    default:\n      return payload\n  }\n}\n","import { createSlice, combineReducers } from '@reduxjs/toolkit'\nimport { get } from 'lodash'\n\nimport { STATE_NAME } from './constants'\nimport { setWith, getSetter, deleteWith } from './helpers'\n\nconst INIT_STATE = {\n  redux_state_subscriptions: {}\n}\n\nconst { actions, reducer } = createSlice({\n  name: STATE_NAME,\n  initialState: INIT_STATE,\n  reducers: {\n    setState: (state, { name, payload, reducer }) => {\n      setWith(\n        state,\n        name,\n        reducer\n          ? reducer(get(state, name), payload)\n          : typeof payload === 'function'\n          ? payload(get(state, name))\n          : getSetter()(get(state, name), payload)\n      )\n    },\n\n    cleanup: (state, { payload, name }) => {\n      get(state, name) && deleteWith(state, name)\n\n      get(state.redux_state_subscriptions, name) &&\n        deleteWith(state.redux_state_subscriptions, name)\n    },\n\n    subscribe: (state, { payload, name, cleanup, reducer }) => {\n      const subscriber_count = get(state.redux_state_subscriptions, name, 0)\n\n      if (payload !== undefined || reducer) {\n        setWith(\n          state,\n          name,\n          reducer\n            ? reducer(get(state, name), payload)\n            : getSetter()(get(state, name), payload)\n        )\n      }\n\n      if (subscriber_count < 1 || cleanup) {\n        setWith(state.redux_state_subscriptions, name, subscriber_count + 1)\n      }\n    },\n\n    unsubscribe: (state, { payload, name, cleanup }) => {\n      const redux_state_subscriptions = state.redux_state_subscriptions\n\n      const subscriber_count = get(state.redux_state_subscriptions, name, 0)\n\n      if (subscriber_count < 2 && cleanup) {\n        if (get(state, name)) {\n          deleteWith(state, name)\n        }\n\n        if (get(redux_state_subscriptions, name)) {\n          deleteWith(redux_state_subscriptions, name)\n        }\n      } else {\n        setWith(state.redux_state_subscriptions, name, subscriber_count - 1)\n      }\n    }\n  }\n})\n\nexport const { setState, cleanup, subscribe, unsubscribe } = actions\n\nexport default (baseReducer) =>\n  combineReducers({ ...baseReducer, [STATE_NAME]: reducer })\n","import { useCallback, useLayoutEffect, useMemo } from 'react'\nimport { useSelector, useStore, useDispatch } from 'react-redux'\nimport libConfig from './config'\nimport { createSelector } from 'reselect'\nimport { get } from 'lodash'\nimport isEqual from 'react-fast-compare'\nimport {\n  isString,\n  unique,\n  sel,\n  getState,\n  setState,\n  action,\n  selector\n} from './helpers'\n\nimport {\n  UNSUBSCRIBE_REDUX_STATE,\n  SUBSCRIBE_REDUX_STATE,\n  CLEANUP_REDUX_STATE,\n  STATE_NAME\n} from './constants'\n\n/**\n * select state from redux efficiently and memoized.\n * @param  {function|string} selectorOrName selector function or state name\n * @param  {function} select state result selector\n * @param  {function} eq equality\n * @return {any}      selected redux state\n */\nexport const useMemoSelector = (selectorOrName, select = sel, eq = isEqual) =>\n  useSelector(\n    createSelector(\n      isString(selectorOrName)\n        ? (state) => selector(state, selectorOrName)\n        : selectorOrName,\n      select\n    ),\n    eq\n  )\n\n/**\n * creates redux state at runtime\n * @param  {string|object} config state name or configuration object\n * @param  {any} initState initial state\n * @return {object}      object containing various helpers\n */\nexport const useReduxState = (config, initState) => {\n  const store = useStore()\n  const dispatch = useDispatch()\n\n  // memoized state name\n  const name = useMemo(\n    () => (isString(config) ? config : config?.name || unique()),\n    [config]\n  )\n\n  // memoized redux action callback to dispatch action for the current state\n  const _action = useCallback(\n    (payload, reducer) => action(name, payload, reducer),\n    [name]\n  )\n\n  // memoized redux action to dispatch cleanup action\n  const cleanUpAction = useCallback(\n    (payload) => ({ type: CLEANUP_REDUX_STATE, payload, name }),\n    [name]\n  )\n\n  // memoized redux action to dispatch subscription action for the current state\n  const stateSubscriptionAction = useCallback(\n    (payload, extend = {}) => ({\n      type: SUBSCRIBE_REDUX_STATE,\n      payload,\n      name,\n      ...extend\n    }),\n    [name]\n  )\n\n  // memoized redux action to dispatch un-subscribe action for the current state\n  const stateUnSubscriptionAction = useCallback(\n    (payload, extend = {}) => ({\n      type: UNSUBSCRIBE_REDUX_STATE,\n      payload,\n      name,\n      ...extend\n    }),\n    [name]\n  )\n\n  // memoized callback to get state for the current state\n  const _getState = useCallback(\n    (callable = sel) => getState(store, name, callable),\n    [name]\n  )\n\n  // memoized callback to get initial state for this hook\n  const getInit = useCallback(() => {\n    const state = isString(config) ? initState : config?.state\n    if (typeof state === 'function') {\n      return state(_getState())\n    } else {\n      return state\n    }\n  }, [config?.state, initState])\n\n  // memoized callback to set state for the current state\n  const _setState = useCallback(\n    (payload, reducer) => setState(dispatch, _action, payload, reducer),\n    [dispatch, _action]\n  )\n\n  // memoized callback to select state for the current state\n  const _selector = useCallback(\n    (state) => {\n      const storeState = selector(state, name)\n      return storeState !== undefined ? storeState : getInit()\n    },\n    [name]\n  )\n\n  // memoized callback to dispatch cleanup action for the current state\n  const cleanup = useCallback(() => dispatch(cleanUpAction()), [cleanUpAction])\n\n  // memoized callback to get subscriptions count for the current state\n  const getStateSubscription = useCallback(\n    () => get(store?.getState()[STATE_NAME].redux_state_subscriptions, name, 0),\n    [name]\n  )\n\n  // initialize the state on layout\n  useLayoutEffect(() => {\n    if (!config?.unmount) {\n      const initialState = getInit()\n      const shouldCleanup =\n        config === undefined ||\n        config?.cleanup ||\n        (config?.cleanup === undefined && libConfig?.cleanup)\n\n      // if cleanup is enabled\n      if (shouldCleanup) {\n        // subsribe to state with initial state\n        dispatch(\n          stateSubscriptionAction(initialState, {\n            cleanup: true,\n            reducer: config?.reducer\n          })\n        )\n\n        // un-subsribe from state when hook unmounts\n        return () =>\n          dispatch(\n            stateUnSubscriptionAction(undefined, {\n              cleanup: true\n            })\n          )\n      } else if (getStateSubscription() < 1 || initialState !== undefined) {\n        // subsribe to state once || with initial state\n        dispatch(\n          stateSubscriptionAction(initialState, {\n            cleanup: false,\n            reducer: config?.reducer\n          })\n        )\n      }\n    }\n  }, [name, config?.unmount])\n\n  return {\n    selector: _selector,\n    setState: _setState,\n    getState: _getState,\n    action: _action,\n    cleanup,\n    useMemoSelector\n  }\n}\n\n/**\n * Hook to get the setState function for the given state\n * @param  {string} name redux state name\n * @return {function}      setState function to set state for the given state\n */\nexport const useSetState = (name) => {\n  const dispatch = useDispatch()\n  const _action = useCallback(\n    (payload, reducer) => action(name, payload, reducer),\n    [name]\n  )\n\n  // memoized setState callback\n  return useCallback(\n    (payload, setter) => setState(dispatch, _action, payload, setter),\n    [dispatch, _action]\n  )\n}\n\n/**\n * Hook to get the getState function for the given state\n * @param  {string} name redux state name\n * @return {function}      getState function to get state for the given state\n */\nexport const useGetState = (name) => {\n  const store = useStore()\n  // memoized getState callback\n  return useCallback((callable) => getState(store, name, callable), [\n    name,\n    store\n  ])\n}\n","import state from './state/reducer';\nimport { mergeReducers } from 'use-redux-states'\n\nconst appReducer = mergeReducers({state});\n\nexport default appReducer;\n","import { configureStore } from '@reduxjs/toolkit'\nimport reducer from './reducers'\nimport {\n  setConfig,\n  SET_REDUX_STATE,\n  SUBSCRIBE_REDUX_STATE\n} from 'use-redux-states'\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [SET_REDUX_STATE, SUBSCRIBE_REDUX_STATE]\n      }\n    })\n})\nsetConfig({\n  cleanup: true,\n  setter: (existingState, payload) => {\n    console.log('using custom setter for type ' + typeof state)\n    switch (existingState?.constructor) {\n      case Object:\n        return payload?.constructor === Object\n          ? { ...existingState, ...payload }\n          : payload\n      case Array:\n        return payload?.constructor === Array\n          ? [...existingState, ...payload]\n          : payload\n      default:\n        return payload\n    }\n  }\n})\nexport default store\n","import React, { useRef, useEffect, useState } from 'react'\nimport useReduxState, {\n  useMemoSelector,\n  useSetState,\n  useGetState\n} from 'use-redux-states'\n\nconst App = () => {\n  const { selector, setState: setMount } = useReduxState({\n    name: 'mounted',\n    state: true\n  })\n\n  const mounted = useMemoSelector(selector)\n\n  return (\n    <div className=''>\n      <ExampleComponent text='Use Redux States 😄' />\n      <div className='body'>\n        <h2>Usage Samples</h2>\n        <Component1 />\n        <Arr />\n        <Component2 />\n        <h2>State Dependency</h2>\n        <Independent />\n        <Dependent />\n        <Dependent2 />\n        <h2>State Cleanup</h2>\n        {mounted && <Cleanable />}\n        {mounted && <UnCleanable />}\n        <Button\n          onPress={() => setMount((mounted) => !mounted)}\n          title={mounted ? 'UnMount' : 'Mount'}\n        />\n        <h2>Usage</h2>\n        <Usage />\n        <h2>Default Setter</h2>\n        <Setter />\n        <h2>Redux State Mount Control</h2>\n        <p>input will have initial value when mounted</p>\n        <MountControl />\n        <NestedState />\n      </div>\n    </div>\n  )\n}\n\nconst Usage = () => {\n  const { selector, setState } = useReduxState('component_state', {\n    /* initial states */\n    count: 1,\n    locale: 'en_US'\n  })\n\n  const { locale, count } = useMemoSelector(selector)\n\n  return (\n    <div>\n      <h6>Current Count: {count}</h6>\n      <input\n        onChange={({ target: { value: locale } }) => setState({ locale })}\n        value={locale}\n      />\n      <button\n        onClick={() =>\n          setState((prevState) => ({ ...prevState, count: count + 1 }))\n        }\n      >\n        Increment Count\n      </button>\n    </div>\n  )\n}\nconst Setter = () => {\n  const { selector, setState } = useReduxState('setter.type.int', 1)\n\n  const number = useMemoSelector(selector)\n\n  return (\n    <div>\n      <input\n        type='number'\n        onChange={({ target: { value } }) => setState(value)}\n        value={number}\n      />\n    </div>\n  )\n}\n\nconst MountControl = () => {\n  const [unmount, setMount] = useState(true)\n  const { selector, setState } = useReduxState({\n    name: 'mount.control',\n    state: { value: 'unmounted value' },\n    unmount\n  })\n\n  const { value } = useMemoSelector(selector)\n\n  return (\n    <div>\n      <h6>unMounted: {unmount?.toString()}</h6>\n      <input\n        onChange={({ target: { value } }) =>\n          setState((prevState) => ({ ...prevState, value }))\n        }\n        value={value}\n      />\n      <button onClick={() => setMount(!unmount)}>Toggle Mount</button>\n    </div>\n  )\n}\nconst NestedState = () => {\n  const { selector, setState } = useReduxState({\n    name: 'nested.state',\n    state: 1\n  })\n\n  const state = useMemoSelector(selector)\n\n  return (\n    <div>\n      <h6>Nested State Value: {state}</h6>\n      <button onClick={() => setState((state) => ++state)}>\n        Increase Nested State\n      </button>\n    </div>\n  )\n}\n\n// i can create a redux state at runtime\nconst Arr = () => {\n  const { selector, setState } = useReduxState('array_state', [1, 2])\n  const array = useMemoSelector(selector) // {count: 1}\n\n  return (\n    <div>\n      <h6>arrays: {array?.map((a) => a + ', ')}</h6>\n      <Button\n        onPress={() =>\n          setState((array) =>\n            array ? [...array, (array.pop() || 0) + 1] : [1, 2, 3]\n          )\n        }\n        title='Increase Array'\n      />\n      <Button\n        onPress={() =>\n          setState((array) =>\n            array ? array.slice(0, array.length - 1) : [1, 2, 3]\n          )\n        }\n        title='Decrease Array'\n      />\n      <Button onPress={() => setState()} title='Reset Array' />\n    </div>\n  )\n}\n\n// i can create a redux state at runtime\nconst Component1 = () => {\n  // const {selector, setState} = useReduxState('component1_state', (state) => {console.log({state}); return {count: 1}});\n  const { selector, setState } = useReduxState('component1_state', { count: 1 })\n  const count = useMemoSelector(selector, (state) => state.count) // {count: 1}\n\n  return (\n    <div>\n      <h6>count: {count}</h6>\n      <Button\n        onPress={() => setState({ count: count + 1 })}\n        title='Increment'\n      />\n    </div>\n  )\n}\n\n// i can access Component1 state\nconst Component2 = () => {\n  const state = useMemoSelector('component1_state') // {count: 2}\n\n  return <Text title={'current component 1 state is: ' + state?.count} />\n}\n\n// i can create a redux state at runtime without depending on the state\nconst Independent = () => {\n  useReduxState('independent_state', { independent: 1, portion: 10 })\n\n  return <Text title='I have initialized state' />\n}\n\n// i can depend on Independent state\nconst Dependent = () => {\n  const times = useRef(0)\n  times.current = times.current + 1\n  const { selector } = useReduxState('independent_state')\n  const independent = useMemoSelector(selector, (state) => state?.independent) // {independent: 2}\n\n  return (\n    <div>\n      <Text\n        title={\n          'i am depending on Independent component state which is: ' +\n          independent\n        }\n      />\n      <Text title={`i have rendered ${times.current} times`} />\n    </div>\n  )\n}\n\n// i can depend on a portion of a state\nconst Dependent2 = () => {\n  const { selector, setState } = useReduxState({\n    name: 'independent_state',\n    state: { portion: 10 },\n    reducer: (currentState, payload) =>\n      currentState ? { ...currentState, ...payload } : { payload }\n  })\n  const setState1 = useSetState('component1_state')\n  const portion = useMemoSelector(selector, (state) => state?.portion) // portion: 10\n\n  return (\n    <div>\n      <Text\n        title={\n          'i am depending only on a portion of a state which is: ' + portion\n        }\n      />\n      <Row>\n        <Button\n          onPress={() =>\n            setState(10, (state, payload) => ({\n              ...state,\n              portion: state.portion + payload\n            }))\n          }\n          title='Set Portion'\n        />\n        <Button\n          onPress={() =>\n            setState1(2, (state, payload) => ({\n              ...state,\n              count: state.count + payload\n            }))\n          }\n          title='Set Component 1 state by 2'\n        />\n      </Row>\n    </div>\n  )\n}\n\n// my state will be clean when i unmount\nconst Cleanable = () => {\n  const { selector, setState } = useReduxState({\n    name: 'cleanable.state',\n    state: { current: 1 }, //payload\n    reducer: (s, payload) => s || payload\n  })\n\n  const getState = useGetState('cleanable.state')\n  const state = useMemoSelector(selector)\n  useEffect(() => {\n    const state = getState((state) => state)\n    console.log({ state })\n  }, [getState])\n\n  return (\n    <div>\n      <Text\n        title={\n          'my state should be cleaned up when i unmount: ' + state?.current\n        }\n      />\n      <Row>\n        <Button\n          onPress={() =>\n            setState(3, ({ current }, payload) => ({\n              current: current + payload\n            }))\n          }\n          title='Increase Mountable State'\n        />\n        <Button\n          onPress={() =>\n            setState(3, ({ current }, payload) => ({\n              current: current - payload\n            }))\n          }\n          title='Decrease Mountable State'\n        />\n      </Row>\n    </div>\n  )\n}\n// my state will be clean when i unmount\nconst UnCleanable = () => {\n  const { selector, setState } = useReduxState({\n    name: 'uncleanable.state',\n    state: (s) => s || { current: 1 },\n    cleanup: false\n  })\n\n  const state = useMemoSelector(selector)\n\n  return (\n    <div>\n      <Text\n        title={\n          'my state should not be cleaned up when i unmount: ' + state?.current\n        }\n      />\n      <Row>\n        <Button\n          onPress={() => setState(({ current }) => ({ current: current + 3 }))}\n          title='Increase Uncleanable State'\n        />\n        <Button\n          onPress={() => setState(({ current }) => ({ current: current - 3 }))}\n          title='Decrease Uncleanable State'\n        />\n      </Row>\n    </div>\n  )\n}\n\nconst Text = (p) => <p {...p}>{p.title}</p>\nconst Button = ({ onPress, ...p }) => (\n  <button {...p} onClick={onPress}>\n    {p.title}\n  </button>\n)\nconst Row = ({ children }) => <div className='row'>{children}</div>\n\nconst ExampleComponent = ({ text }) => {\n  return <div className='test'>Example Component: {text}</div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport store from \"./redux/store\";\nimport App from './App'\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}